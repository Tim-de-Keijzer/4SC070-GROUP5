function V_result = Opti_waveforms(x)%% Global variablesglobal width amplitude%% Model namesys_name = '';% sys_name = 'EV_2spd_4AUB10_2';load_system(sys_name);%% Set actual optimization valueswidth         = x(1);  % clamp dimple widthamplitude     = x(2);  % clamp dimple height% g1          = x(1);  % gear ratio [-]% g2          = x(2);  % gear ratio [-]% scale_EM    = x(3);  % EM scale [-]% scale_EM_2  = x(4);  % EM scale [-]% Np          = x(5);  % Number of cells connected in parallel [-]% Ns          = x(6);  % Number of cells connected in series [-]% switch_w    = x(7);  % Wheel speed switch value to turn on second motor [Nm]% switch_T    = x(8);  % Torque switch value to turn on second motor [Nm]% split_value = x(9);  % Split fraction of how much power each motor delivers when both are used [-]%% Set constrainsreq      = [0, 0.1, 0, 0.25];min_width = req(1);                                                        max_width = req(2);                                                    min_amp= req(3);                                                    max_amp = req(4);                                       %% Build matrix of optimization parameter valuesx_result = [x_result; x'];% y_result = [y_result; [mv]'];% z_result = [z_result; [ta]'];%% Simulationoptions = simset('SrcWorkspace','current');results = sim(sys_name,[],options);% Consider last value of the computed fuel consumption vector V_result = results.cons_BT(end);%% Checks% Check whether cycle could be finished exactly in N_sim computational steps;% if cycle duration is less than N_sim, set fuel consumption to infiniteif (max(size(results.t)) < N_sim)     V_result = Inf;end% Check whether acceleration time constraint is satisfiedif width <= min_width    V_result = V_result;else    V_result = Inf;end % Check whether overspeed constraint is satifiedif vmax >= vmax_req    V_result = V_result;else    V_result = Inf;end% Check whether range constraint is satifiedif max_range >= max_range_req    V_result = V_result;else    V_result = Inf;end% Check whether gradability constraint is satifiedif max_gradient_percent >= max_gradient_percent_req    V_result = V_result;else    V_result = Inf;end% Check whether vehicle mass constraint is satifiedif mv <= max_mv_req    V_result = V_result;else    V_result = Inf;end% Check whether gradability while driving constraint is satifiedif max_grad_driving >= max_grad_driving_req    V_result = V_result;else    V_result = Inf;endif split_value <= 1    V_result = V_result;else    V_result = Inf;end